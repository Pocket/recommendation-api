version: 2.1

orbs:
  aws-ecs: circleci/aws-ecs@2.0.0
  pocket: pocket/circleci-orbs@2.1.2

  aws-cli: circleci/aws-cli@3.1.2  # Update to the latest version
  aws-ecr: circleci/aws-ecr@9.3.3  # Update to a version newer than 9.0.1


# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev




jobs:
  docker_build_new:
    description: >
      Build and/or push docker image to ECR. Runs codebuild if specified ECR does not exist to create it
    parameters:
      aws-access-key-id:
        description: 'AWS access key id environment variable'
        type: string
      aws-region:
        description: 'AWS region environment variable'
        type: string
        default: AWS_DEFAULT_REGION
      aws-secret-access-key:
        description: 'AWS secret access key environment variable'
        type: string
      aws-account-id:
        description: 'AWS Account ID'
        type: string
      codebuild-project-name:
        description: 'The CodeBuild project name'
        type: string
        default: ''
      codebuild-project-branch:
        description: 'The git branch to build'
        type: string
        default: ''
      docker-image:
        description: 'Docker image to use for the job'
        type: string
        default: cimg/base:stable  # Use a non-deprecated image
      ecr-url:
        description: 'The ECR URL'
        type: string
      extra-build-args:
        description: 'Extra flags to pass to docker build'
        type: string
        default: '--build-arg GIT_SHA=${CIRCLE_SHA1}'
      path:
        description: 'Path to the directory containing your Dockerfile and build context.'
        type: string
        default: '/tmp/workspace/app_prod'
      push:
        description: 'Whether or not to push the code'
        type: boolean
        default: false
      repo-name:
        description: 'The ECR repo name'
        type: string
      tag:
        description: 'The docker tag name'
        type: string
        default: 'latest,${CIRCLE_SHA1}'
      workspace:
        description: 'Path to CircleCI workspace to attach for the build'
        type: string
        default: '/tmp/workspace'
      remote-docker-version:
        type: string
        default: '20.10.18'
        description: 'Specific remote docker version'
      remote-docker-layer-caching:
        type: boolean
        default: false
        description: 'Enable Docker layer caching if using remote Docker engine.'

    docker:
      - image: << parameters.docker-image >>
    steps:
      - aws-cli/setup:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          aws-region: << parameters.aws-region >>
      - run:
          name: Setup Environment Variables
          command: |
            echo 'export AWS_ECR_ACCOUNT_URL="<< parameters.ecr-url >>"' >> $BASH_ENV
            echo 'export AWS_REGION="<< parameters.aws-region >>"' >> $BASH_ENV
            echo 'export REPO_NAME="<< parameters.repo-name >>"' >> $BASH_ENV
            echo 'export CODEBUILD_PROJECT_NAME="<< parameters.codebuild-project-name >>"' >> $BASH_ENV
            echo 'export CODEBUILD_PROJECT_BRANCH="<< parameters.codebuild-project-branch >>"' >> $BASH_ENV
      - attach_workspace:
          at: << parameters.workspace >>
      - when:
          condition: << parameters.push >>
          steps:
            - run:
                name: Run CodeBuild for ECR
                command: |
                  # Your script or commands to run CodeBuild if necessary
                  echo "Running CodeBuild for ECR..."
            - aws-ecr/build_and_push_image:
                account_id: << parameters.aws-account-id >>
                auth:
                  - aws-cli/setup:
                      aws-access-key-id: << parameters.aws-access-key-id >>
                      aws-secret-access-key: << parameters.aws-secret-access-key >>
                      aws-region: << parameters.aws-region >>
                checkout: false
                repo: << parameters.repo-name >>
                path: << parameters.path >>        # Path to the Dockerfile
                build_path: << parameters.path >>  # Build context
                tag: << parameters.tag >>
                extra_build_args: << parameters.extra-build-args >>
                platform: 'linux/amd64,linux/arm64'
      - unless:
          condition: << parameters.push >>
          steps:
            - setup_remote_docker:
                version: << parameters.remote-docker-version >>
                docker_layer_caching: << parameters.remote-docker-layer-caching >>
            - aws-cli/setup:
                aws-access-key-id: << parameters.aws-access-key-id >>
                aws-secret-access-key: << parameters.aws-secret-access-key >>
                aws-region: << parameters.aws-region >>
            - aws-ecr/build_image:
                account_id: << parameters.aws-account-id >>
                repo: << parameters.repo-name >>
                path: << parameters.path >>        # Path to the Dockerfile
                build_path: << parameters.path >>  # Build context
                tag: << parameters.tag >>
                extra_build_args: << parameters.extra-build-args >>
                platform: 'linux/amd64,linux/arm64'


# -----------------------------------------------------------------------
# recommendation-api jobs

  apollo:
    machine:
      image: ubuntu-2404:2024.05.1
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Build docker-compose.yml
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
            touch .env
            docker-compose build
      - run:
          name: Export GraphQL schema to file
          command: |
            mkdir ./tmp
            chmod 777 ./tmp
            docker-compose run app_dev sh -c "strawberry export-schema app.graphql.graphql_router:schema > /tmp/schema.graphql"
            cp ./tmp/schema.graphql ./
      - run:
          name: install rover
          command: |
            # download and install Rover
            curl -sSL https://rover.apollo.dev/nix/v0.8.1 | sh
            # This allows the PATH changes to persist to the next `run` step
            echo 'export PATH=$HOME/.rover/bin:$PATH' >> $BASH_ENV
      - run:
          name: check service
          command: rover subgraph check pocket-client-api@current --schema ./schema.graphql --name=recommendation-api
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: push service
                command: rover subgraph publish pocket-client-api@current --schema ./schema.graphql --routing-url https://recommendation-api.readitlater.com/ --name=recommendation-api
      - when:
          condition:
            equal: [ dev, << pipeline.git.branch >> ]
          steps:
            - run:
                name: push service to dev client graph
                command: rover subgraph publish pocket-client-api@development --schema ./schema.graphql --routing-url https://recommendation-api.getpocket.dev/ --name=recommendation-api
      - store_artifacts:
          path: ./schema.graphql

  build:
    #Sets up the code for the docker image to build in
    #Other repos at Pocket use this to install modules and or compile the code.
    docker:
      - image: python:3.8
    steps:
      - checkout
      # Define the working directory for this job
      - attach_workspace:
          at: /tmp/workspace

      # Copy built files to app_prod folder
      - run:
          name: Setup workspace
          command: |
            mkdir -p /tmp/workspace/app_prod
            cp -r . /tmp/workspace/app_prod
            cp .docker/images/app/Dockerfile /tmp/workspace/app_prod/
      # Persist built files to workspace
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - app_prod

  test_app:
    machine:
      image: ubuntu-2404:2024.05.1
      #docker_layer_caching: true  # This prevents the latest snowplow-micro image from being pulled.
    steps:
      - checkout
      - run:
          name: Build images of services declared in docker-compose.yml
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
            touch .env
            docker-compose build
      - run:
          name: Run tests
          command: |
            mkdir tests/test-reports
            chmod 777 tests/test-reports
            docker-compose run app_dev pytest tests --junitxml=tests/test-reports/xml_results/junit.xml
      - store_test_results:
          path: tests/test-reports

  test_lambda:
    parameters:
      pipenv_path:
        default: "aws_lambda/"
        type: string
    docker:
      - image: python:3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    environment:
      WORKON_HOME: '~/.venv'
    steps:
      - checkout
      - restore_cache:
          key: deps-test-{{ checksum "<<parameters.pipenv_path>>Pipfile.lock" }}
      - run:
          name: Build environment and install requirements
          command: |
            cd <<parameters.pipenv_path>>
            pip install pipenv
            pipenv install --dev
      - save_cache:
          key: deps-test-{{ checksum "<<parameters.pipenv_path>>Pipfile.lock" }}
          paths:
            - "~/.venv"
      - run:
          name: Run tests
          command: |
            mkdir test-reports
            cd <<parameters.pipenv_path>>
            pipenv run pytest tests/ --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports

  lambda:
    description: Builds and Optionaly deploys all the associated lambdas
    parameters:
      env_lower_name:
        type: string
        description: The lower case env name
      env_capital_name:
        default: Env Name
        description: The env capital name
        type: string
      deploy:
        type: boolean
        default: true
    docker:
      - image: python:3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - when:
          condition: << parameters.deploy >>
          steps:
            - aws-cli/setup:
                aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
                aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
            - run:
                name: Package Lambda
                # We bundle our code in a way that lambda can understand and execute
                # - pipenv requirements > requirements.txt - output a requirements.txt file from Pipfile
                # - pip install -r requirements.txt --no-deps -t package | installs the requirements into a "package" directory
                # - change dir into the "package" dir and add all the packages to a zip file as /tmp
                # - change dir into the "aws_lambda" dir and remove all files and folder we want to exclude from the build
                # - change dir into the root of the application and add the "aws_lambda" dir to the zip file excluding the Pipfile and Pipfile.lock
                # - copy the zip file to /tmp/build.zip and store as a CI artifact for quick inspection of the build
                command: |
                  apt-get update && apt-get install zip
                  pip install pipenv==2022.8.15
                  cd aws_lambda
                  pipenv requirements > requirements.txt
                  pip install -r requirements.txt --no-deps -t package
                  cd package
                  mkdir -p /tmp
                  zip -r9 "/tmp/$CIRCLE_SHA1.zip" . -x \*__pycache__\* \.git\*
                  cd .. && rm -rf package __pycache__ requirements.txt && cd ..
                  zip -gr "/tmp/$CIRCLE_SHA1.zip" aws_lambda -x aws_lambda/Pipfile*
                  cp "/tmp/$CIRCLE_SHA1.zip" /tmp/build.zip
            - run:
                name: Upload Package
                command: aws s3 cp "/tmp/$CIRCLE_SHA1.zip" s3://pocket-recommendationapi-<< parameters.env_lower_name >>-sqs-translation/
            - pocket/deploy_lambda:
                s3-bucket: pocket-recommendationapi-<< parameters.env_lower_name >>-sqs-translation
                aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
                aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
                codedeploy-application-name: RecommendationAPI-<< parameters.env_capital_name >>-Sqs-Translation-Lambda
                codedeploy-deployment-group-name: RecommendationAPI-<< parameters.env_capital_name >>-Sqs-Translation-Lambda
                function-name: RecommendationAPI-<< parameters.env_capital_name >>-Sqs-Translation-Function

      - store_artifacts:
          path: /tmp/build.zip

workflows:
  all:
    jobs:
      - test_app:
          <<: *not_main
          context: pocket
      - test_lambda:
          <<: *not_main
          context: pocket

      - apollo:
          context: pocket

      - build

      # Build & Deploy Development Lambdas
      - lambda:
          <<: *only_dev
          context: pocket
          name: deploy_lambdas_dev
          env_lower_name: dev
          env_capital_name: Dev
          deploy: true
          requires:
            - setup-deploy-params-dev

      # Build & Deploy Production Lambdas
      - lambda:
          <<: *only_main
          context: pocket
          name: deploy_lambdas_prod
          env_lower_name: prod
          env_capital_name: Prod
          deploy: true
          requires:
            - setup-deploy-params-prod

      # Try building the ECS docker image on each branch
      - docker_build_new:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          aws-account-id: '410318598490'
          repo-name: recommendationapi-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
          push: false
          requires:
            - build

      # Build & Deploy the Dev Docker Image
      - docker_build_new:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codebuild-project-name: RecommendationAPI-Dev
          codebuild-project-branch: dev
          aws-account-id: '410318598490'
          repo-name: recommendationapi-dev-app
          ecr-url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
          push: true
          requires:
            - build

      # Dev
      - pocket/execute_codepipeline:
          <<: *only_dev
          context: pocket
          name: deploy_dev
          environment: Dev
          aws-access-key-id: Dev_AWS_ACCESS_KEY
          aws-secret-access-key: Dev_AWS_SECRET_ACCESS_KEY
          aws-region: Dev_AWS_DEFAULT_REGION
          codepipeline-name: RecommendationAPI-Dev-CodePipeline
          codebuild-project-name: RecommendationAPI-Dev
          codebuild-project-branch: dev
          requires:
            - build_docker_dev

      # Build & Deploy the Prod Docker Image
      - docker_build_new:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          aws-account-id: '996905175585'
          codebuild-project-name: RecommendationAPI-Prod
          codebuild-project-branch: main
          repo-name: recommendationapi-prod-app
          ecr-url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
          push: true
          requires:
            - build

      # Prod
      - pocket/execute_codepipeline:
          <<: *only_main
          context: pocket
          name: deploy_prod
          environment: Prod
          aws-access-key-id: Prod_AWS_ACCESS_KEY
          aws-secret-access-key: Prod_AWS_SECRET_ACCESS_KEY
          aws-region: Prod_AWS_DEFAULT_REGION
          codepipeline-name: RecommendationAPI-Prod-CodePipeline
          codebuild-project-name: RecommendationAPI-Prod
          codebuild-project-branch: main
          requires:
            - build_docker_prod

      # Prod
      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: RecommendationAPI

      # Dev
      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: RecommendationAPI

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/recommendation-api
          sentry_project_name: recommendation-api
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/recommendation-api
          sentry_project_name: recommendation-api
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - deploy_dev
