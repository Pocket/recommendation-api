version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1
  aws-ecr: circleci/aws-ecr@6.10.0
  aws-ecs: circleci/aws-ecs@1.2.0
  pocket: pocket/circleci-orbs@1.0.0

jobs:

  apollo:
    docker:
      - image: circleci/node:14
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: install apollo
          # CircleCI needs global installs to be sudo
          command: |
            sudo npm install -g apollo
      - run:
          name: push service
          command: |
            apollo service:push --graph=pocket-client-api --localSchemaFile=schema.graphql --key=$APOLLO_KEY --serviceURL=https://explore-topics.readitatler.com/ --serviceName=explore-topics

  test:
    parameters:
      project_path:
        default: "./"
        type: string
    docker:
      - image: python:3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: localstack/localstack:0.12.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          DEBUG: 1
          SERVICES: 'dynamodb'
          DATA_DIR: /tmp/localstack/data
          EXTRA_CORS_ALLOWED_HEADERS: Content-Disposition, Content-Type, x-amz-acl
          EXTRA_CORS_EXPOSE_HEADERS: ETag
          HOSTNAME_EXTERNAL: localstack
          PORT_WEB_UI: 8080
    steps:
      - checkout
      - run:
          name: Build environment and install requirements
          command: |
            cd <<parameters.project_path>>
            pip install pipenv
            pipenv install --dev
      - run:
          name: run setup.sh
          command: export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --aws
      - run:
          name: Run tests
          command: |
            mkdir test-reports
            export $(egrep -v '^#' .docker/local.env | xargs -0)
            pipenv run pytest <<parameters.project_path>>tests/ --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports

  check_metaflow:
    docker:
      - image: python:3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          USERNAME: 'test'
    steps:
      - checkout
      - run:
          name: Build environment and install requirements
          command: |
            apt-get -qq update && apt-get -qq install wget > /dev/null
            wget -nv https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && bash Miniconda3-latest-Linux-x86_64.sh -b  -p $HOME/miniconda
            pip install pipenv
            pipenv install --deploy
      - run:
          name: Run flow validation
          command: |
            source "$HOME/miniconda/etc/profile.d/conda.sh"
            hash -r
            conda config --append channels conda-forge
            pipenv run python AlgorithmicCandidatesFlow.py --environment=conda check
            pipenv run python CuratedCandidatesFlow.py --environment=conda check
            pipenv run python CollectionCandidatesFlow.py --environment=conda check

  docker_build:
    parameters:
      tag:
        description: 'The docker tag name'
        type: string
      environment:
        description: 'The environment name'
        type: string
      ecr_url:
        description: 'The ecr url'
        type: string
      repo_name:
        description: 'The ecr repo name'
        type: string
      push:
        description: 'Whether or not to push the code'
        type: boolean
        default: false
    docker:
      - image: cimg/base:2020.01
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Setup common environment variables
          command: |
            echo 'export AWS_ECR_ACCOUNT_URL="<< parameters.ecr_url >>"' >> $BASH_ENV
            echo 'export AWS_REGION=${<< parameters.environment >>_AWS_DEFAULT_REGION}' >> $BASH_ENV
      - run:
          name: Setup docker build
          command: |
            cp .docker/images/app/Dockerfile .
      - when:
          condition: <<parameters.push>>
          steps:
            - aws-ecr/build-and-push-image:
                checkout: false
                repo: << parameters.repo_name >>
                setup-remote-docker: true
                aws-access-key-id: << parameters.environment >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.environment >>_AWS_SECRET_ACCESS_KEY
                tag: << parameters.tag >>
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
      - unless:
          condition: <<parameters.push>>
          steps:
            - setup_remote_docker
            - aws-ecr/build-image:
                repo: << parameters.repo_name >>
                tag: << parameters.tag >>
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
  lambda:
    description: Builds and Optionaly deploys all the associated lambdas
    parameters:
      env_lower_name:
        type: string
        description: The lower case env name
      env_capital_name:
        default: Env Name
        description: The env capital name
        type: string
      deploy:
        type: boolean
        default: true
    docker:
      - image: python:3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - when:
          condition: << parameters.deploy >>
          steps:
            - aws-cli/setup:
                aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
                aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
            - run:
                name: Package Lambda
                # We bundle our code in a way that lambda can understand and execute
                # - pipenv lock -r > requirements.txt - output a requirements.txt file from Pipfile
                # - pip install -r requirements.txt --no-deps -t package | installs the requirements into a "package" directory
                # - change dir into the "package" dir and add all the packages to a zip file as /tmp
                # - change dir into the "aws_lambda" dir and remove all files and folder we want to exclude from the build
                # - change dir into the root of the application and add the "aws_lambda" dir to the zip file excluding the Pipfile and Pipfile.lock
                # - copy the zip file to /tmp/build.zip and store as a CI artifact for quick inspection of the build
                command: |
                  apt-get update && apt-get install zip
                  pip install pipenv
                  cd aws_lambda
                  pipenv lock -r > requirements.txt
                  pip install -r requirements.txt --no-deps -t package
                  cd package
                  mkdir -p /tmp
                  zip -r9 "/tmp/$CIRCLE_SHA1.zip" . -x \*__pycache__\* \.git\*
                  cd .. && rm -rf package __pycache__ requirements.txt && cd ..
                  zip -gr "/tmp/$CIRCLE_SHA1.zip" aws_lambda -x aws_lambda/Pipfile*
                  cp "/tmp/$CIRCLE_SHA1.zip" /tmp/build.zip
            - run:
                name: Upload Package
                command: aws s3 cp "/tmp/$CIRCLE_SHA1.zip" s3://pocket-exploretopics-<< parameters.env_lower_name >>-translation/
            - pocket/deploy_lambda:
                s3-bucket: pocket-exploretopics-<< parameters.env_lower_name >>-translation
                aws-access-key-id: << parameters.env_capital_name >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.env_capital_name >>_AWS_SECRET_ACCESS_KEY
                aws-region: << parameters.env_capital_name >>_AWS_DEFAULT_REGION
                codedeploy-application-name: ExploreTopics-<< parameters.env_capital_name >>-Translation-Lambda
                codedeploy-deployment-group-name: ExploreTopics-<< parameters.env_capital_name >>-Translation-Lambda
                function-name: ExploreTopics-<< parameters.env_capital_name >>-Translation-Function

      - store_artifacts:
          path: /tmp/build.zip

# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

workflows:
  all:
    jobs:
      - test:
          <<: *not_main
          context: pocket
          name: test_app
      - test:
          <<: *not_main
          context: pocket
          name: test_lambda
          project_path: 'aws_lambda/'
      - check_metaflow:
          <<: *not_main
          context: pocket

      # Build & Deploy Development Lambdas
      - lambda:
          <<: *only_dev
          context: pocket
          name: deploy_lambdas_dev
          env_lower_name: dev
          env_capital_name: Dev
          deploy: true
          requires:
            - setup-deploy-params-dev

      # Build & Deploy Production Lambdas
      - lambda:
          <<: *only_main
          context: pocket
          name: deploy_lambdas_prod
          env_lower_name: prod
          env_capital_name: Prod
          deploy: true
          requires:
            - setup-deploy-params-prod

      # Try building the ECS docker image on each branch
      - docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: exploretopics-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: false

      # Build & Deploy the Dev Docker Image
      - docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: exploretopics-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: true

      - aws-ecs/deploy-service-update:
          context: pocket
          name: deploy_ecs_dev
          family: 'ExploreTopics-Dev'
          cluster-name: 'ExploreTopics-Dev'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'ExploreTopics-Dev-ECS'
          codedeploy-deployment-group-name: 'ExploreTopics-Dev-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 8000
          container-image-name-updates: 'container=app,image-and-tag=410318598490.dkr.ecr.us-east-1.amazonaws.com/exploretopics-dev-app:$CIRCLE_SHA1'
          aws-access-key-id: $Dev_AWS_ACCESS_KEY
          aws-secret-access-key: $Dev_AWS_SECRET_ACCESS_KEY
          aws-region: $Dev_AWS_DEFAULT_REGION
          requires:
            - build_docker_dev

      # Bu›ild & Deploy the Prod Docker Image
      - docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          environment: 'Prod'
          tag: latest,$CIRCLE_SHA1
          repo_name: exploretopics-prod-app
          ecr_url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          push: true

      - aws-ecs/deploy-service-update:
          name: deploy_ecs_prod
          context: pocket
          family: 'ExploreTopics-Prod'
          cluster-name: 'ExploreTopics-Prod'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'ExploreTopics-Prod-ECS'
          codedeploy-deployment-group-name: 'ExploreTopics-Prod-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 8000
          container-image-name-updates: 'container=app,image-and-tag=996905175585.dkr.ecr.us-east-1.amazonaws.com/exploretopics-prod-app:$CIRCLE_SHA1'
          aws-access-key-id: $Prod_AWS_ACCESS_KEY
          aws-secret-access-key: $Prod_AWS_SECRET_ACCESS_KEY
          aws-region: $Prod_AWS_DEFAULT_REGION
          requires:
            - build_docker_prod

      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ExploreTopics

      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ExploreTopics

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/explore-topics
          sentry_project_name: explore-topics
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - build_docker_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/explore-topics
          sentry_project_name: explore-topics
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - build_docker_dev
