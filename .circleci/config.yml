version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1
  aws-ecr: circleci/aws-ecr@6.10.0
  aws-ecs: circleci/aws-ecs@1.2.0
  pocket: pocket/circleci-orbs@1.0.0

jobs:

  apollo:
    docker:
      - image: circleci/node:14
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: install apollo
          # CircleCI needs global installs to be sudo
          command: |
            sudo npm install -g apollo
      - run:
          name: push service
          command: |
            apollo service:push --graph=pocket-client-api --localSchemaFile=schema.graphql --key=$APOLLO_KEY --serviceURL=https://explore-topics.readitatler.com/ --serviceName=explore-topics

  test:
    docker:
      - image: python:3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
      - image: localstack/localstack:0.12.1
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          DEBUG: 1
          SERVICES: 'dynamodb'
          DATA_DIR: /tmp/localstack/data
          EXTRA_CORS_ALLOWED_HEADERS: Content-Disposition, Content-Type, x-amz-acl
          EXTRA_CORS_EXPOSE_HEADERS: ETag
          HOSTNAME_EXTERNAL: localstack
          PORT_WEB_UI: 8080
    steps:
      - checkout
      - run:
          name: Build environment and install requirements
          command: |
            pip install pipenv
            pipenv install --dev
      - run:
          name: run setup.sh
          command: export $(egrep -v '^#' .docker/local.env | xargs -0) && ./.circleci/scripts/setup.sh --hosts --aws
      - run:
          name: Run tests
          command: |
            mkdir test-reports
            export $(egrep -v '^#' .docker/local.env | xargs -0)
            pipenv run pytest tests/ --junitxml=test-reports/junit.xml
      - store_test_results:
          path: test-reports

  check_metaflow:
    docker:
      - image: python:3.8
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          USERNAME: 'test'
    steps:
      - checkout
      - run:
          name: Build environment and install requirements
          command: |
            pip install pipenv
            pipenv install --deploy
      - run:
          name: Run flow validation
          command: |
            pipenv run python jobs/AlgorithmicCandidatesFlow.py check
            pipenv run python jobs/CuratedCandidatesFlow.py check

  docker_build:
    parameters:
      tag:
        description: 'The docker tag name'
        type: string
      environment:
        description: 'The environment name'
        type: string
      ecr_url:
        description: 'The ecr url'
        type: string
      repo_name:
        description: 'The ecr repo name'
        type: string
      push:
        description: 'Whether or not to push the code'
        type: boolean
        default: false
    docker:
      - image: cimg/base:2020.01
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Setup common environment variables
          command: |
            echo 'export AWS_ECR_ACCOUNT_URL="<< parameters.ecr_url >>"' >> $BASH_ENV
            echo 'export AWS_REGION=${<< parameters.environment >>_AWS_DEFAULT_REGION}' >> $BASH_ENV
      - run:
          name: Setup docker build
          command: |
            cp .docker/images/app/Dockerfile .
      - when:
          condition: <<parameters.push>>
          steps:
            - aws-ecr/build-and-push-image:
                checkout: false
                repo: << parameters.repo_name >>
                setup-remote-docker: true
                aws-access-key-id: << parameters.environment >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.environment >>_AWS_SECRET_ACCESS_KEY
                tag: << parameters.tag >>
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
      - unless:
          condition: <<parameters.push>>
          steps:
            - setup_remote_docker
            - aws-ecr/build-image:
                repo: << parameters.repo_name >>
                tag: << parameters.tag >>
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}




# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

workflows:
  all:
    jobs:
      - test:
          <<: *not_main
          context: pocket
      - check_metaflow:
          <<: *not_main
          context: pocket

      # Try building the ECS docker image on each branch
      - docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: exploretopics-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: false

      # Build & Deploy the Dev Docker Image
      - docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: exploretopics-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: true

      - aws-ecs/deploy-service-update:
          context: pocket
          name: deploy_ecs_dev
          family: 'ExploreTopics-Dev'
          cluster-name: 'ExploreTopics-Dev'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'ExploreTopics-Dev-ECS'
          codedeploy-deployment-group-name: 'ExploreTopics-Dev-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 8000
          container-image-name-updates: 'container=app,image-and-tag=410318598490.dkr.ecr.us-east-1.amazonaws.com/exploretopics-dev-app:$CIRCLE_SHA1'
          aws-access-key-id: $Dev_AWS_ACCESS_KEY
          aws-secret-access-key: $Dev_AWS_SECRET_ACCESS_KEY
          aws-region: $Dev_AWS_DEFAULT_REGION
          requires:
            - build_docker_dev

      # Buâ€ºild & Deploy the Prod Docker Image
      - docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          environment: 'Prod'
          tag: latest,$CIRCLE_SHA1
          repo_name: exploretopics-prod-app
          ecr_url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          push: true

      - aws-ecs/deploy-service-update:
          name: deploy_ecs_prod
          context: pocket
          family: 'ExploreTopics-Prod'
          cluster-name: 'ExploreTopics-Prod'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'ExploreTopics-Prod-ECS'
          codedeploy-deployment-group-name: 'ExploreTopics-Prod-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 8000
          container-image-name-updates: 'container=app,image-and-tag=996905175585.dkr.ecr.us-east-1.amazonaws.com/exploretopics-prod-app:$CIRCLE_SHA1'
          aws-access-key-id: $Prod_AWS_ACCESS_KEY
          aws-secret-access-key: $Prod_AWS_SECRET_ACCESS_KEY
          aws-region: $Prod_AWS_DEFAULT_REGION
          requires:
            - build_docker_prod

      # Notify sentry of main deployment
      - pocket/sentry_release_notification:
          <<: *only_main
          name: sentry-release-notification-prod
          context: pocket
          repository_name: Pocket/explore-topics
          sentry_project_name: explore-topics
          sentry_env: production
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - build_docker_prod

      # Notify sentry of dev deployment
      - pocket/sentry_release_notification:
          <<: *only_dev
          name: sentry-release-notification-dev
          context: pocket
          repository_name: Pocket/explore-topics
          sentry_project_name: explore-topics
          sentry_env: development
          sentry_org: pocket
          workspace-path: /tmp/workspace
          requires:
            - build_docker_dev
