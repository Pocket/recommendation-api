type Query {
    """
    Get the recomendations for a specific topic
    """
    getTopicRecommendations(slug: String!, algorithmicCount: Int = 20, curatedCount: Int = 5): TopicRecommendations  @deprecated(reason: "Use `getSlateLineup` with a specific SlateLineup instead.")

    """
    List all available topics that we have recomendarions for.
    """
    listTopics: [Topic!]! @deprecated(reason: "Use `getSlateLineup` with a specific SlateLineup instead.")

    """
    Request a specific `Slate` by id
    """
    getSlate(
        "The {Slate.id} of the slate to return"
        slateId: String!,
        "Maximum number of recommendations to return in {Slate.recommendations}, defaults to 10"
        recommendationCount: Int = 10
    ): Slate

    """
    List all available slates
    """
    listSlates(
        "Maximum number of recommendations to return in {Slate.recommendations}, defaults to 0"
        recommendationCount: Int = 0
    ): [Slate!]!

    """
    Request a specific `SlateLineup` by id
    """
    getSlateLineup(
        "The {SlateLineup.id} of the SlateLineup to return"
        slateLineupId: String!,
        "Maximum number of slates to return in {SlateLineup.slates}, defaults to 8"
        slateCount: Int = 8,
        "Maximum number of recommendations to return in {Slate.recommendations}, defaults to 10"
        recommendationCount: Int = 10
    ): SlateLineup
}

"""
Represents a type of page for /explore
Deprecated for SlateLineups
"""
enum PageType {
    editorial_collection
    topic_page
}

"""
Represents a topic for /explore
Deprecated for SlateLineups
"""
type Topic {
    """
    The id of the topic
    """
    id: ID!

    """
    The name of the topic to show to the user
    """
    displayName: String!

    """
    If returned a note to show to the user about the topic
    """
    displayNote: String

    """
    The slug that should be used in the url to represent the topic
    """
    slug: String!

    """
    The query that was used internally for elasticsearch to find items
    """
    query: [String!]!

    """
    The label the curator uses internally to get items onto this topic
    """
    curatorLabel: String!

    """
    Whether or not clients should show this topic ot users
    """
    isDisplayed: Boolean!

    """
    Whether or not this topic should be visiblly promoted (prominent on the page)
    """
    isPromoted: Boolean!

    """
    The title to use in the HTML markup for SEO and social media sharing
    """
    socialTitle: String

    """
    The description to use in the HTML markup for SEO and social media sharing
    """
    socialDescription: String

    """
    The image to use in the HTML markup for SEO and social media sharing
    """
    socialImage: String

    """
    The type of page this topic represents used in  generation
    """
    pageType: PageType!

    """
    The internal feed id that this topic will pull from if set
    """
    customFeedId: ID
}

"""
Represents a set of recomednations for /explore
Deprecated for SlateLineups
"""
type TopicRecommendations {
    """
    Recomendations that are sourced directly from our curators
    """
    curatedRecommendations: [Recommendation!]!

    """
    Recomendations that are sourced from Machine Learning models
    """
    algorithmicRecommendations: [Recommendation!]!
}

"""
Represents a Recomendation from Pocket
"""
type Recommendation @key(fields: "item { itemId }") {
    """
    A generated id from the Data and Learning team that represents the Recomendation
    """
    id: ID

    """
    The ID of the item this recomendation represents
    TODO: Use apollo federation to turn this into an Item type.
    """
    itemId: ID!

    """
    The Item that is resolved by apollo federation using the itemId
    """
    item: Item!

    """
    The feed id from mysql that this item was curated from (if it was curated)
    """
    feedId: Int

    """
    The publisher of the item
    """
    publisher: String

    """
    The source of the recommendation
    """
    recSrc: String!
}

"""
A grouping of item recomendations that relate to each other under a specific name and description
"""
type Slate {
    id: String!

    """
    A guid that is unique to every API request that returned slates, such as `getSlateLineup` or `getSlate`.
    The API will provide a new request id every time apps hit the API.
    """
    requestId: ID!

    """
    A unique guid/slug, provided by the Data & Learning team that can identify a specific experiment.
    Production apps typically won't request a specific one, but can for QA or during a/b testing.
    """
    experimentId: ID!

    """
    The name to show to the user for this set of recomendations
    """
    displayName: String

    """
    The description of the the slate
    """
    description: String

    """
    An ordered list of the recomendations to show to the user
    """
    recommendations: [Recommendation!]!
}

type SlateLineup {
    """
    A unique slug/id that describes a SlateLineup. The Data & Learning team will provide apps what id to use here for specific cases.
    """
    id: ID!
    """
    A guid that is unique to every API request that returned slates, such as `getRecommendationSlateLineup` or `getSlate`.
    The API will provide a new request id every time apps hit the API.
    """
    requestId: ID!

    """
    A unique guid/slug, provided by the Data & Learning team that can identify a specific experiment.
    Production apps typically won't request a specific one, but can for QA or during a/b testing.
    """
    experimentId: ID!

    """
    An ordered list of slates for the client to display
    """
    slates: [Slate!]!
}

extend type Item @key(fields: "itemId") {
    """
    The ID of the item that is used by apollo federation to reference the Item entity.
    """
    itemId: String! @external
}
