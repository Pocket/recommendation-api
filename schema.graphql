extend type CorpusItem @key(fields: "id") {
    """
    The ID of the corpus item

    CorpusItem is defined here:
    https://studio.apollographql.com/graph/pocket-client-api/schema/reference/objects/CorpusItem
    """
    id: ID! @external
}

type CorpusRecommendation @key(fields: "id") {
    """
    A unique identifier for this specific recommendation across all recommendations. This identifier is generated by the
    a machine learning system making recommendation decisions. This field can be joined with recommendation decisions to
    aggregate more meta data about the decision.
    """
    id: ID!

    """
    Content meta data.
    """
    corpusItem: CorpusItem
}

"""
This is the same as Slate but in this type all recommendations are backed by CorpusItems. This means that the editorial
team has editorial control over the items served by this endpoint.
"""
type CorpusSlate @key(fields: "id") {
    """
    UUID
    """
    id: ID!

    """
    Recommendations for the current request context.
    """
    recommendations(count: Int = 10): [CorpusRecommendation!]!

    """
    The display headline for the slate. Surface context may be required to render determine what to display. This will
    depend on if we connect the copy to the Surface, SlateExperiment, or Slate.
    """
    headline: String!

    """
    A smaller, secondary headline that can be displayed to provide additional context on the slate.
    """
    subheadline: String

    """
    The URL destination of the page to explore more content like this Slate.
    """
    moreLinkUrl: String

    """
    The display name for the link to explore more content like this Slate.
    """
    moreLinkName: String
}

"""
A collection of slates.
"""
type CorpusSlateLineup @key(fields: "id") {
    """
    UUID
    """
    id: ID!

    """
    Slates.
    """
    slates(count: Int = 10): [CorpusSlate!]!
}

input TopicInput {
    """
    The id of the topic
    """
    id: ID!
}

input UpdateUserRecommendationPreferencesInput {
    """
    Topics that the user expressed interest in.
    """
    preferredTopics: [TopicInput!]!
}

type UserRecommendationPreferences {
    """
    Topics that the user expressed interest in.
    """
    preferredTopics: [Topic!]
}

extend type User @key(fields: "id") {
    """
    User id, provided by the user service.
    """
    id: ID! @external
    """
    Preferences for recommendations that the user has explicitly set.
    """
    recommendationPreferences: UserRecommendationPreferences
}

type RankedCorpusSlate @key(fields: "id") {
    id: ID!
    description: String!
    displayName: String!
    experimentId: String!
    corpusItems: [CorpusItem!]
    requestId: String
}

type RankedCorpusSlateExperiment @key(fields: "id") {
    id: ID!
    rankedCorpusSlateId: ID!
    description: String!
    candidateSets: [ID!]
    rankers: [ID!]
}

"""
Represents a type of page for /explore
Deprecated for SlateLineups
"""
enum PageType {
    editorial_collection
    topic_page
}

"""
Represents a topic for /explore
Deprecated for SlateLineups
"""
type Topic {
    """
    The id of the topic
    """
    id: ID!

    """
    The name of the topic to show to the user
    """
    name: String!

    """
    The name of the topic to show to the user
    """
    displayName: String! @deprecated(reason: "displayName is deprecated. Use name instead.")

    """
    If returned a note to show to the user about the topic
    """
    displayNote: String

    """
    The slug that should be used in the url to represent the topic
    """
    slug: String!

    """
    The query that was used internally for elasticsearch to find items
    """
    query: String!

    """
    The label the curator uses internally to get items onto this topic
    """
    curatorLabel: String!

    """
    Whether or not clients should show this topic ot users
    """
    isDisplayed: Boolean!

    """
    Whether or not this topic should be visiblly promoted (prominent on the page)
    """
    isPromoted: Boolean!

    """
    The title to use in the HTML markup for SEO and social media sharing
    """
    socialTitle: String

    """
    The description to use in the HTML markup for SEO and social media sharing
    """
    socialDescription: String

    """
    The image to use in the HTML markup for SEO and social media sharing
    """
    socialImage: String

    """
    The type of page this topic represents used in  generation
    """
    pageType: PageType!

    """
    The internal feed id that this topic will pull from if set
    """
    customFeedId: ID
}

"""
Represents a set of recomednations for /explore
Deprecated for SlateLineups
"""
type TopicRecommendations {
    """
    Recomendations that are sourced directly from our curators
    """
    curatedRecommendations: [Recommendation!]!

    """
    Recomendations that are sourced from Machine Learning models
    """
    algorithmicRecommendations: [Recommendation!]!
}

"""
Represents a Recomendation from Pocket
"""
type Recommendation @key(fields: "item { itemId }") {
    """
    A generated id from the Data and Learning team that represents the Recomendation
    """
    id: ID

    """
    A generated id from the Data and Learning team that represents the Recomendation - Deprecated
    """
    feedItemId: ID @deprecated(reason: "Use `id`")

    """
    The ID of the item this recomendation represents
    TODO: Use apollo federation to turn this into an Item type.
    """
    itemId: ID!

    """
    The Item that is resolved by apollo federation using the itemId
    """
    item: Item!

    """
    The feed id from mysql that this item was curated from (if it was curated)
    """
    feedId: Int

    """
    The publisher of the item
    """
    publisher: String

    """
    The source of the recommendation
    """
    recSrc: String!
}

"""
A grouping of item recomendations that relate to each other under a specific name and description
"""
type Slate {
    id: String!

    """
    A guid that is unique to every API request that returned slates, such as `getSlateLineup` or `getSlate`.
    The API will provide a new request id every time apps hit the API.
    """
    requestId: ID!

    """
    A unique guid/slug, provided by the Data & Learning team that can identify a specific experiment.
    Production apps typically won't request a specific one, but can for QA or during a/b testing.
    """
    experimentId: ID!

    """
    The name to show to the user for this set of recomendations
    """
    displayName: String

    """
    The description of the the slate
    """
    description: String

    """
    An ordered list of the recomendations to show to the user
    """
    recommendations: [Recommendation!]!
}

type SlateLineup {
    """
    A unique slug/id that describes a SlateLineup. The Data & Learning team will provide apps what id to use here for specific cases.
    """
    id: ID!
    """
    A guid that is unique to every API request that returned slates, such as `getRecommendationSlateLineup` or `getSlate`.
    The API will provide a new request id every time apps hit the API.
    """
    requestId: ID!

    """
    A unique guid/slug, provided by the Data & Learning team that can identify a specific experiment.
    Production apps typically won't request a specific one, but can for QA or during a/b testing.
    """
    experimentId: ID!

    """
    An ordered list of slates for the client to display
    """
    slates: [Slate!]!
}

extend type Item @key(fields: "itemId") {
    """
    The ID of the item that is used by apollo federation to reference the Item entity.
    """
    itemId: String! @external
}

type Query {
    """
    Get stories during Setup Moment onboarding that are personalized with user preferences provided during onboarding.
    """
    setupMomentSlate: CorpusSlate

    """
    List all topics that the user can express a preference for.
    """
    recommendationPreferenceTopics: [Topic!]!

    """
    Get the recomendations for a specific topic
    """
    getTopicRecommendations(slug: String!, algorithmicCount: Int = 20, curatedCount: Int = 5): TopicRecommendations  @deprecated(reason: "Use `getSlateLineup` with a specific SlateLineup instead.")

    """
    List all available topics that we have recomendarions for.
    """
    listTopics: [Topic!]! @deprecated(reason: "Use `getSlateLineup` with a specific SlateLineup instead.")

    """
    Request a specific `Slate` by id
    """
    getSlate(
        "The {Slate.id} of the slate to return"
        slateId: String!,
        "Maximum number of recommendations to return in {Slate.recommendations}, defaults to 10"
        recommendationCount: Int = 10
    ): Slate

    """
    List all available slates
    """
    listSlates(
        "Maximum number of recommendations to return in {Slate.recommendations}, defaults to 0"
        recommendationCount: Int = 0
    ): [Slate!]!  @deprecated(reason: "This query has not been used in the last month, and its purpose is unclear.")

    """
    Request a specific `SlateLineup` by id
    """
    getSlateLineup(
        "The {SlateLineup.id} of the SlateLineup to return"
        slateLineupId: String!,
        "Maximum number of slates to return in {SlateLineup.slates}, defaults to 8"
        slateCount: Int = 8,
        "Maximum number of recommendations to return in {Slate.recommendations}, defaults to 10"
        recommendationCount: Int = 10
    ): SlateLineup

    """
    Request a specific `RankedCorpusSlate` by ID: ultimately replaces `getSlate`
    """
    getRankedCorpusSlate(
        slateId: String!
    ): RankedCorpusSlate  @deprecated(reason: "This query is experimental and might not work as expected")
}

type Mutation {
    """
    Updates user preferences for content recommendations across Pocket.
    """
    updateUserRecommendationPreferences(
        input: UpdateUserRecommendationPreferencesInput!
    ): UserRecommendationPreferences
}
